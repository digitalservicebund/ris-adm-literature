on:
  workflow_call:

jobs:
  # Build the backend once
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "23.0"
          distribution: "temurin"
          cache: gradle
      - name: Build backend JAR
        working-directory: ./backend
        run: ./gradlew bootJar

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/.node-version
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Get Playwright version
        working-directory: ./frontend
        run: echo "PLAYWRIGHT_VERSION=$(jq -r '.packages["node_modules/@playwright/test"].version' package-lock.json)" >> $GITHUB_ENV
      - name: Cache browser binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers
        working-directory: ./frontend
        # installs all browsers at once
        run: npx playwright install --with-deps

      # upload artifacts
      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/build/libs/*.jar
      - name: Upload frontend node_modules
        uses: actions/upload-artifact@v4
        with:
          name: frontend-deps
          path: frontend/node_modules

  e2e-tests:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        playwright-project:
          [
            { name: "chromium", install: "chromium" },
            { name: "firefox", install: "firefox" },
            { name: "webkit", install: "webkit", requiresInstallWithDeps: true },
            { name: "msedge", install: "msedge chromium" },
          ]
        shardIndex: [ 1, 2, 3, 4 ]
        shardTotal: [ 4 ]
    runs-on: ubuntu-latest
    services:
      # Label for the service
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ris_adm_vwv
        # Health check to wait until the database is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # This doesn't come with node 23 and would need to be updated every time playwright version changes
    # container:
    #   image: mcr.microsoft.com/playwright:v1.50.0-noble
    #   options: --user 1001
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          # same version as the 'setup' job
          java-version: "23.0"
          distribution: "temurin"

        # download deps
      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
      - name: Download frontend dependencies
        uses: actions/download-artifact@v4
        with:
          name: frontend-deps
          path: frontend/node_modules
      - name: Get Playwright version
        working-directory: ./frontend
        run: echo "PLAYWRIGHT_VERSION=$(jq -r '.packages["node_modules/@playwright/test"].version' package-lock.json)" >> $GITHUB_ENV
      - name: Restore browser binaries from cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Start backend from JAR
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: ris_adm_vwv
        run: java -jar *.jar &

      - name: Wait for backend to serve the health Actuator (max 5min)
        timeout-minutes: 5
        run: |
          until curl --output /dev/null --silent --head --fail http://localhost:8080/actuator/health/readiness; do
            echo "Waiting for backend to be fully up..."
            sleep 0.1
          done
      - name: Run e2e tests (project ${{ matrix.playwright-project.name }})
        working-directory: ./frontend
        run: |
          npm run test:e2e -- --project ${{ matrix.playwright-project.name }} --shard=${{ matrix.shardIndex }}/4
      - name: Upload e2e ${{ matrix.playwright-project.name }} test report blob
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.playwright-project.name }}-${{ matrix.shardIndex }}
          retention-days: 1
          path: frontend/frontend-e2e-test-report.blob
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@814d0c4b2ad6a3443e89c991f8657b10126510bf # v1.5.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  merge-reports:
    needs: e2e-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/.node-version
      - name: Install dependencies to get Playwright CLI
        run: npm ci
        working-directory: ./frontend

      - name: Download all sharded blob reports
        uses: actions/download-artifact@v4
        with:
          pattern: blob-report-*
          path: all-blob-reports

      - name: Merge the blob reports
        working-directory: ./frontend
        run: |
          npx playwright merge-reports --reporter html ../all-blob-reports

      - name: Upload final merged HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-merged
          path: playwright-report/
          retention-days: 3
