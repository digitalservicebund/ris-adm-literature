on:
  workflow_call:

jobs:

  e2e-tests:
    strategy:
      matrix:
        playwright-projects: ["chromium", "firefox", "webkit", "msedge"]
    runs-on: ubuntu-latest
    # container:
    #   image: mcr.microsoft.com/playwright:v1.50.0-noble
    #   options: --user 1001
    steps:
      - uses: actions/checkout@v4
      # setup backend
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "23.0"
          distribution: "temurin"
          cache: gradle
      - name: Setup and validate Gradle
        uses: gradle/actions/setup-gradle@94baf225fe0a508e581a564467443d0e2379123b
      - name: Start backend
        working-directory: ./backend
        run: ./gradlew bootRun & # we'll wait for the backend to respond right before running the tests
      # setup frontend
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/.node-version
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: |
            ./frontend/node_modules
          key: modules-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: |
          npm ci
        working-directory: ./frontend
      - name: Get Playwright version
        working-directory: ./frontend
        run: echo "PLAYWRIGHT_VERSION=$(jq -r '.packages["node_modules/@playwright/test"].version' package-lock.json)" >> $GITHUB_ENV
      - name: Cache browser binaries
        id: cache-browser-binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps ${{ matrix.playwright-projects }}
      - name: Wait for backend to serve the health Actuator (max 5min)
        timeout-minutes: 5
        run: |
          until curl --output /dev/null --silent --head --fail http://localhost:8080/actuator/health/readiness; do  
            echo "Waiting for backend to be fully up..."  
            sleep 0.1
          done
      - name: Run e2e tests (project ${{ matrix.playwright-projects }})
        working-directory: ./frontend
        run: |
          npm run test:e2e -- --project ${{ matrix.playwright-projects }}
      - name: Rename ${{ matrix.playwright-projects }} test report blob
        working-directory: ./frontend
        run: mv frontend-e2e-test-report.blob frontend-e2e-test-report.blob.${{ matrix.playwright-projects }}.zip
      - name: Upload e2e ${{ matrix.playwright-projects }} test report blob
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-e2e-test-report.blob.${{ matrix.playwright-projects }}
          retention-days: 3
          path: frontend/frontend-e2e-test-report.blob.${{ matrix.playwright-projects }}.zip
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@814d0c4b2ad6a3443e89c991f8657b10126510bf # v1.5.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  compile-e2e-HTML-report:
    needs: e2e-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/.node-version
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: |
            ./frontend/node_modules
          key: modules-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: |
          npm ci
        working-directory: ./frontend
      # download reports from project/browser matrix
      - name: Download e2e chromium test report blob
        uses: actions/download-artifact@v4
        with:
          name: frontend-e2e-test-report.blob.chromium
          path: tmp/e2e-test-report
      - name: Download e2e firefox test report blob
        uses: actions/download-artifact@v4
        with:
          name: frontend-e2e-test-report.blob.firefox
          path: tmp/e2e-test-report
      - name: Download e2e webkit test report blob
        uses: actions/download-artifact@v4
        with:
          name: frontend-e2e-test-report.blob.webkit
          path: tmp/e2e-test-report
      - name: Download e2e msedge test report blob
        uses: actions/download-artifact@v4
        with:
          name: frontend-e2e-test-report.blob.msedge
          path: tmp/e2e-test-report
      # end of downloads
      - name: Generate HTML report out of all the blobs
        working-directory: ./frontend
        run: |
          npx playwright merge-reports --reporter html ../tmp/e2e-test-report
      - name: Upload e2e HTML test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-e2e-test-report-html
          retention-days: 3
          path: frontend/playwright-report

  push-e2e-report-to-ris-reports:
    needs: compile-e2e-HTML-report
    continue-on-error: true
    runs-on: ubuntu-latest
    env:
      reports-repo: digitalservicebund/ris-reports
    steps:
      # This step needs to happen before any "add-ris-report" action
      # (otherwise the folder is not git repository and does not support git commands)
      - name: Checkout ris-reports
        uses: actions/checkout@v4
        with:
          repository: ${{ env.reports-repo }}
          ssh-key: ${{ secrets.RIS_REPORTS_DEPLOY_PRIVATE_KEY }}

      ########################################################################
      # Downloading and adding test reports
      # Note: actually pushing the reports is a separate step after all these
      ########################################################################

      - name: Download artifact frontend e2e test report
        uses: actions/download-artifact@v4
        with:
          name: frontend-e2e-test-report-html
          path: tmp/frontend-e2e-test-report-html
      - name: Add frontend e2e test report for push
        uses: digitalservicebund/add-ris-report@c6c8735d23295c36a271c75e7dedc9b6b9a9ef5e
        with:
          filePath: tmp/frontend-e2e-test-report-html
          destinationDir: test-reports/ris-adm-vwv/frontend/e2e-tests
          reportIsDirectory: true

      
      ##############################################
      # Finally: pushing the reports to ris-reports
      ##############################################
      - name: Setup git config
        run: |
          git config user.name "${{ github.repository }}"
          # This email identifies the commit as GitHub Actions - see https://github.com/orgs/community/discussions/26560
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name:
          Push reports
          # we use `toJSON(...)` below to escape double quotation marks
        run: |
          git diff-index --cached --quiet HEAD ||
            git commit \
              -m ${{ toJSON(github.event.head_commit.message) }} \
              -m "From commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}" &&
            git push origin main &&
            echo "Pushed reports to ${{ github.server_url }}/${{ env.REPORTS_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
      
      # - name: Send status to Slack
      # we don't handle a failure as a problem (that's why we set "continue-on-error")
      # hence it's certainly not worthy of sending an alarm message